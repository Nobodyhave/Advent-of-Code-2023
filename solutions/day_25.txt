Part 1
---
This problem can be solved with the brute force - we can just create a triple nested cycle to iterate over all the combinations of edges.
And the check the graph without then for the amount of connected components.
But it won't work on the big input (or will be too long). So didn't implement it. Next thought that I had was around algorithms that are
looking for bridges in the graph. But they won't work, as our condition is stronger, let's say a reinforced bridge. Then I started to look
into spanning trees, but they definitely don't fit. Next was the min-cut in general. There is probably a way to solve the problem with the
min cut max flow algorithms. We can look for the edge disjoint paths and then look for the combination of edges from the different paths. In
 our case there shouldn't be more than 3 sets, as min-cut size is 3. Before diving into it I decided to take a look into the Reddit and
 found out that there is a nice approach using a Karger's algorithm. This algorithm conflates the graph to just 2 vertices using the union
 find data structure. And when we have just 2 vertices, all the edges connecting them would in the min-cut. The thing is that this algorithm
  is a heuristic, so the solution is not always a real min-cut. It can be bigger. We'll need to run it multiple times, until we get the
  desired size of the min-cut. Union-find data structure allows us to keep the track of the amount of the vertices on the each side of the
  cut, so we can then just multiply the rank of 2 subsets and get the answer.


